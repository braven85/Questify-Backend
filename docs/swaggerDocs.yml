tags:
  name: Users
  description: Users endpoints

components:
  schemas:
    User:
      type: object
      required:
        - email
        - password
      properties:
        id:
          type: string
          example: 62a5e76be56b359bbce6d0a2
          description: The auto-generated id of the user
        email:
          type: string
          format: email
          example: email@email.com
          description: User's email address
        password:
          type: string
          format: password
          example: $2b$06$Urq1ur4hbPril/4jHZnleu9TQL86.mMdPJne5m599OlK1OV/3W8v2
          description: User's bcrypted password
        accessToken:
          type: string
          format: jwt
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYyYTVlNzZiZTU2YjM1OWJiY2U2ZDBhMiIsImVtYWlsIjoicmFkZWtAZ21haWwuY29tIiwiaWF0IjoxNjU1MDUyMDM4LCJleHAiOjE2NTUwNTU2Mzh9.4uW-8WYaoqRFjRmFbzoWgUlmTgWG_JxrjSbi6shsElk
          description: User's access token auto-generated using JWT
        refreshToken:
          type: string
          format: jwt
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYyYTVlNzZiZTU2YjM1OWJiY2U2ZDBhMiIsImVtYWlsIjoicmFkZWtAZ21haWwuY29tIiwiaWF0IjoxNjU1MDUyMDM4LCJleHAiOjE2NTUwNTU2Mzh9.5BVPRez1ow7xRADNCj1OW7bxezd7AWPKeRv6aXSBkss
          description: User's refresh token auto-generated using JWT
    Registration Request:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          minimum: 3
          maximum: 254
          example: email@email.com
          description: User's email
        password:
          type: string
          format: password
          minimum: 8
          maximum: 100
          example: qwerty123
          description: User's password
    Registration Response:
      type: object
      properties:
        email:
          type: string
          format: email
          example: email@email.com
          description: User's email
        id:
          type: string
          example: 62a5e76be56b359bbce6d0a2
          description: User's id
    Login Request:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: email@email.com
          description: User's email
        password:
          type: string
          format: password
          example: qwerty123
          description: User's password
    Login Response:
      type: object
      properties:
        accessToken:
          type: string
          format: jwt
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYyYTVlNzZiZTU2YjM1OWJiY2U2ZDBhMiIsImVtYWlsIjoicmFkZWtAZ21haWwuY29tIiwiaWF0IjoxNjU1MDUyMDM4LCJleHAiOjE2NTUwNTU2Mzh9.4uW-8WYaoqRFjRmFbzoWgUlmTgWG_JxrjSbi6shsElk
          description: Session's access token (needed for all requests)
        refreshToken:
          type: string
          format: jwt
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYyYTVlNzZiZTU2YjM1OWJiY2U2ZDBhMiIsImVtYWlsIjoicmFkZWtAZ21haWwuY29tIiwiaWF0IjoxNjU1MDUyMDM4LCJleHAiOjE2NTUwNTU2Mzh9.5BVPRez1ow7xRADNCj1OW7bxezd7AWPKeRv6aXSBkss
          description: Session's refresh token (needed for /auth/refresh)
        sid:
          type: string
          format: uuid
          example: 05b4cd18-f5af-4aac-9eed-272c4f16464e
          description: Session's id (needed for /auth/refresh)
        userData:
          type: object
          properties:
            email:
              type: string
              format: email
              example: email@email.com
              description: User's email
            id:
              type: string
              example: 62a5e76be56b359bbce6d0a2
              description: User's id
            cards:
              type: object
              description: User's card
              properties:
                _id:
                  type: string
                  example: 62a6222d69d60457c1ec1437
                  description: Card's id
                title:
                  type: string
                  example: Do the laundry
                  description: Card's title
                difficulty:
                  type: string
                  example: Normal
                  enum:
                    - Easy
                    - Normal
                    - Hard
                  description: Card's difficulty
                category:
                  type: string
                  example: Learning
                  enum:
                    - Stuff
                    - Family
                    - Health
                    - Learning
                    - Leisure
                    - Work
                  description: Card's category
                date:
                  type: string
                  example: 2022-06-13
                  description: Card's date (deadline, if card is challenge)
                time:
                  type: string
                  example: 11:40
                  description: Card's time (deadline, if card is challenge)
                type:
                  type: string
                  example: Task
                  enum:
                    - Task
                    - Challenge
                  description: Card's type
                isCompleted:
                  type: boolean
                  example: false
                  description: Card's status
                owner:
                  type: string
                  example: 62a6220969d60457c1ec142e
                  description: Card's owner's id

paths:
  /api/users:
    get:
      summary: Returns the list of all users
      tags: [Users]
      description: Get the list of all users
      responses:
        "200":
          description: The list of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  /api/users/register:
    post:
      summary: User registration
      tags: [Users]
      description: User registration
      requestBody:
        description: Registration's object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Registration Request"
      responses:
        "201":
          description: User successfully created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Registration Response"
        "400":
          description: Bad request (invalid request body)
        "409":
          description: User already exists
  /api/users/login:
    post:
      summary: User authentication
      tags: [Users]
      description: User authentication
      requestBody:
        description: Authentication's object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login Request"
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Login Response"
        "400":
          description: Bad request (invalid request body)
        "403":
          description: User with provided email doesn't exist / Password is wrong
